generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator erd {
    provider = "prisma-erd-generator"
    output   = "../docs/ER-DIAGRAM.pdf"
    theme    = "forest"
}

enum Provider {
    APPLE
    EMAIL
    GOOGLE
}

enum Role {
    PACIENT
    PSYCHOLOGIST
}

enum BrazilState {
    AC
    AL
    AP
    AM
    BA
    CE
    DF
    ES
    GO
    MA
    MT
    MS
    MG
    PA
    PB
    PR
    PE
    PI
    RJ
    RN
    RS
    RO
    RR
    SC
    SP
    SE
    TO
}

enum Status {
    APPROVED
    UNDER_REVIEW
    REPPROVED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

model Credential {
    id            String   @id @default(uuid()) @db.Uuid
    provider      Provider @default(EMAIL)
    email         String   @unique
    password      String   @map("password")
    tokenRecovery String?  @map("token_recovery")
    role          Role
    inactive      Boolean  @default(false)
    createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    pacient      Pacient?
    psychologist Psychologist?

    @@map("credentials")
}

model Pacient {
    id                     String   @id @default(uuid()) @db.Uuid
    credentialId           String   @unique @map("credential_id") @db.Uuid
    individualIdentityId   String   @unique @map("individual_identity_id") @db.Uuid
    selectedPsychologistId String?  @map("selected_psychologist_id") @db.Uuid
    createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt              DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    credential Credential         @relation(fields: [credentialId], references: [id])
    identity   IndividualIdentity @relation(fields: [individualIdentityId], references: [id])

    psychologists Psychologist[]
    reviews       Review[]

    @@map("pacients")
}

model GuestPacient {
    id             String  @id @default(uuid()) @db.Uuid
    psychologistId String? @db.Uuid
    contactId      String? @db.Uuid
    name           String

    contact      Contact?      @relation(fields: [contactId], references: [id])
    psychologist Psychologist? @relation(fields: [psychologistId], references: [id])
}

model Psychologist {
    id                   String   @id @default(uuid()) @db.Uuid
    credentialId         String   @unique @map("credential_id") @db.Uuid
    individualIdentityId String   @unique @map("individual_identity_id") @db.Uuid
    officeId             String   @unique @map("office_id") @db.Uuid
    resume               String?
    status               Status   @default(UNDER_REVIEW)
    createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    credential Credential         @relation(fields: [credentialId], references: [id])
    identity   IndividualIdentity @relation(fields: [individualIdentityId], references: [id])
    office     Office             @relation(fields: [officeId], references: [id])

    pacients   Pacient[]
    guests     GuestPacient[]
    approaches TherapeuticApproache[]
    reviews    Review[]

    @@map("psychologists")
}

model IndividualIdentity {
    id        String  @id @default(uuid()) @db.Uuid
    firstName String  @map("first_name")
    lastName  String  @map("last_name")
    cpf       String  @unique
    avatarUrl String? @map("avatar_url")
    gender    String?
    contactId String? @unique @map("contact_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    contact Contact? @relation(fields: [contactId], references: [id])

    pacient      Pacient?
    Psychologist Psychologist?

    @@map("individual_identities")
}

model Contact {
    id        String   @id @default(uuid()) @db.Uuid
    telephone String?
    cellPhone String?  @map("cell_phone")
    email     String?
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    identity     IndividualIdentity?
    office       Office?
    GuestPacient GuestPacient[]

    @@map("contacts")
}

model Address {
    id           String      @id @default(uuid()) @db.Uuid
    zipCode      String      @map("zip_code")
    street       String
    number       String?
    complement   String?
    neighborhood String
    city         String
    state        BrazilState
    latitude     Float?
    longitude    Float?
    createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

    office Office?

    @@map("addresses")
}

model TherapeuticApproache {
    id          String   @id @default(uuid()) @db.Uuid
    name        String   @unique
    description String?
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    psychologists Psychologist[]

    @@map("therapeutic_approaches")
}

model Office {
    id        String   @id @default(uuid()) @db.Uuid
    contactId String?  @unique @map("contact_id") @db.Uuid
    addressId String   @unique @map("address_id") @db.Uuid
    photos    String[]
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    contact      Contact?      @relation(fields: [contactId], references: [id])
    address      Address       @relation(fields: [addressId], references: [id])
    psychologist Psychologist?

    @@map("offices")
}

model Review {
    id             String   @id @default(uuid()) @db.Uuid
    pacientId      String   @map("pacient_id") @db.Uuid
    psychologistId String   @map("psychologist_id") @db.Uuid
    rating         Int
    comment        String?
    createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    psychologist Psychologist @relation(fields: [psychologistId], references: [id])
    pacient      Pacient      @relation(fields: [pacientId], references: [id])

    @@map("reviews")
}
