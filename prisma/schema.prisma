generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Provider {
    APPLE
    EMAIL
    GOOGLE
}

enum Role {
    ADMIN
    BACK_OFFICE
    CUSTOMER
    PSYCHOLOGIST
}

enum BrazilState {
    AC
    AL
    AP
    AM
    BA
    CE
    DF
    ES
    GO
    MA
    MT
    MS
    MG
    PA
    PB
    PR
    PE
    PI
    RJ
    RN
    RS
    RO
    RR
    SC
    SP
    SE
    TO
}

enum Status {
    APPROVED
    UNDER_REVIEW
    REPPROVED
}

enum AppointmentStatus {
    ONGOING
    CANCELED
    COMPLETED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum TypeNotification {
    WELCOME
    CUSTOMER_ADD_PSICO
    CREATE_APPOINTMENT
    UPDATE_APPOINTMENT
    CANCEL_APPOINTMENT
    CREATE_REVIEW
}

enum AppointmentCompletedBy {
    CUSTOMER
    PSYCHOLOGIST
    TIME_EXPIRED
}

model Credential {
    id Int @id @default(autoincrement()) @db.Integer

    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    provider      Provider  @default(EMAIL)
    email         String    @unique
    password      String
    tokenRecovery String?   @map("token_recovery")
    role          Role
    inactivatedAt DateTime? @map("inactivated_at")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")
    lastLoginAt   DateTime? @map("last_login_at")
    lastLoginIp   String?   @map("last_login_ip")

    customer     Customer?
    psychologist Psychologist?
    admin        Admin?

    @@index([integrationId, email])
    @@map("credentials")
}

model Customer {
    id Int @id @default(autoincrement()) @db.Integer

    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    credentialId Int? @unique @map("credential_id") @db.Integer
    profileId    Int  @unique @map("profile_id") @db.Integer
    guestId      Int? @unique @map("guest_id") @db.Integer

    selectedPsychologistId Int?     @map("selected_psychologist_id") @db.Integer
    createdAt              DateTime @default(now()) @map("created_at")
    updatedAt              DateTime @updatedAt @map("updated_at")

    credential Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile?    @relation(fields: [profileId], references: [id])
    guest      Guest?      @relation(fields: [guestId], references: [id])

    psychologists Psychologist[]
    reviews       Review[]
    likes         Like[]
    appointments  Appointment[]
    views         View[]

    @@index([integrationId])
    @@map("customers")
}

model Guest {
    id Int @id @default(autoincrement()) @db.Integer

    contactId Int? @unique @map("contact_id") @db.Integer

    name      String
    createdAt DateTime @default(now()) @map("created_at")

    contact  Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    customer Customer?

    @@map("guests")
}

model Psychologist {
    id Int @id @default(autoincrement()) @db.Integer

    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    credentialId Int @unique @map("credential_id") @db.Integer
    profileId    Int @unique @map("profile_id") @db.Integer
    officeId     Int @unique @map("office_id") @db.Integer

    resume    String?
    status    Status   @default(UNDER_REVIEW)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    credential Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile    @relation(fields: [profileId], references: [id])
    office     Office     @relation(fields: [officeId], references: [id])

    customers    Customer[]
    approaches   TherapeuticApproaches[]
    reviews      Review[]
    appointments Appointment[]
    views        View[]
    invites      Invite[]

    @@index([integrationId, status])
    @@map("psychologists")
}

model Admin {
    id Int @id @default(autoincrement()) @db.Integer

    credentialId Int @unique @map("credential_id") @db.Integer
    profileId    Int @unique @map("profile_id") @db.Integer

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    credential Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile    @relation(fields: [profileId], references: [id])

    @@map("admins")
}

model Profile {
    id Int @id @default(autoincrement()) @db.Integer

    contactId Int? @unique @map("contact_id") @db.Integer

    firstName String  @map("first_name")
    lastName  String  @map("last_name")
    cpf       String  @unique
    avatarUrl String? @map("avatar_url")
    gender    String?

    contact Contact? @relation(fields: [contactId], references: [id])

    customer     Customer?
    psychologist Psychologist?
    admin        Admin?

    @@map("profiles")
}

model Contact {
    id Int @id @default(autoincrement()) @db.Integer

    telephone String?
    cellPhone String? @map("cell_phone")
    email     String?

    profile Profile?
    office  Office?
    guest   Guest[]

    @@map("contacts")
}

model Address {
    id Int @id @default(autoincrement()) @db.Integer

    zipCode      String      @map("zip_code")
    street       String
    number       String?
    complement   String?
    neighborhood String
    city         String
    state        BrazilState
    latitude     Float?
    longitude    Float?
    office       Office?

    @@map("addresses")
}

model TherapeuticApproaches {
    id Int @id @default(autoincrement()) @db.Integer

    name        String  @unique
    description String?

    psychologists Psychologist[]

    @@map("therapeutic_approaches")
}

model Office {
    id Int @id @default(autoincrement()) @db.Integer

    contactId Int? @unique @map("contact_id") @db.Integer
    addressId Int  @unique @map("address_id") @db.Integer

    photos         String[]
    operatingHours String?  @map("operating_hours")

    contact      Contact?      @relation(fields: [contactId], references: [id])
    address      Address       @relation(fields: [addressId], references: [id])
    psychologist Psychologist?

    @@map("offices")
}

model Review {
    id Int @id @default(autoincrement()) @db.Integer

    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    customerId     Int @map("customer_id") @db.Integer
    psychologistId Int @map("psychologist_id") @db.Integer

    rating    Int
    comment   String?
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    psychologist Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade)
    customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
    likes        Like[]

    @@index([integrationId, psychologistId, rating])
    @@map("reviews")
}

model Like {
    reviewId   Int      @map("review_id") @db.Integer
    customerId Int      @map("customer_id") @db.Integer
    likedAt    DateTime @default(now()) @map("liked_at")

    review   Review   @relation(fields: [reviewId], references: [id])
    customer Customer @relation(fields: [customerId], references: [id])

    @@id([reviewId, customerId])
    @@map("likes")
}

model Appointment {
    id            Int    @id @default(autoincrement()) @db.Integer
    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    psychologistId Int               @map("psychologist_id") @db.Integer
    patientId      Int               @map("patient_id") @db.Integer
    createdBy      Role              @map("created_by")
    status         AppointmentStatus @default(ONGOING)
    price          Float?
    createdAt      DateTime          @default(now()) @map("created_at")
    updatedAt      DateTime          @updatedAt @map("updated_at")

    closedAppointment ClosedAppointment?
    psychologist      Psychologist       @relation(fields: [psychologistId], references: [id], onDelete: Cascade)
    patient           Customer           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    schedules         Schedule[]

    @@index([psychologistId, patientId, status])
    @@map("appointments")
}

model Schedule {
    id Int @id @default(autoincrement()) @db.Integer

    appointmentId Int @map("appointment_id") @db.Integer

    startsAt  DateTime @map("starts_at")
    endsAt    DateTime @map("ends_at")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    @@index([appointmentId, startsAt, endsAt])
    @@map("schedules")
}

model ClosedAppointment {
    id Int @id @default(autoincrement()) @db.Integer

    appointmentId Int @unique @map("appointment_id") @db.Integer

    closedBy           AppointmentCompletedBy @map("closed_by")
    additionalComments String?                @map("additional_comments")
    cancellationReason String?                @map("cancellation_reason")
    cancelAt           DateTime?              @map("cancel_at")
    closedAt           DateTime               @default(now()) @map("closed_at")

    appointment Appointment @relation(fields: [appointmentId], references: [id])

    @@map("closed_appointments")
}

model Notification {
    id Int @id @default(autoincrement()) @db.Integer

    integrationId String @unique @default(uuid()) @map("integration_id") @db.Uuid

    type TypeNotification
    data Json             @db.Json

    createdAt DateTime @default(now()) @map("created_at")

    views View[]

    @@index([integrationId])
    @@map("notifications")
}

model View {
    id Int @id @default(autoincrement()) @db.Integer

    notificationId Int @map("notification_id") @db.Integer
    customerId     Int @map("customer_id") @db.Integer
    psychologistId Int @map("psychologist_id") @db.Integer

    createdAt DateTime  @default(now()) @map("created_at")
    readAt    DateTime? @map("read_at")

    notification Notification  @relation(fields: [notificationId], references: [id])
    customer     Customer?     @relation(fields: [customerId], references: [id])
    psychologist Psychologist? @relation(fields: [psychologistId], references: [id])

    @@index([notificationId])
    @@map("views")
}

model Invite {
    id Int @id @default(autoincrement()) @db.Integer

    psychologistId Int @map("psychologist_id") @db.Integer

    token      String?
    name       String
    email      String
    accepted   Boolean   @default(false)
    acceptedAt DateTime? @map("accepted_at")
    createdAt  DateTime  @default(now()) @map("created_at")

    psychologist Psychologist @relation(fields: [psychologistId], references: [id])

    @@map("invites")
}
