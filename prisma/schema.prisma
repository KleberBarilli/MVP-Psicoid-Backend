generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator erd {
    provider = "prisma-erd-generator"
    output   = "../docs/ER-DIAGRAM.pdf"
    theme    = "forest"
}

enum Provider {
    APPLE
    EMAIL
    GOOGLE
}

enum Role {
    ADMIN
    BACK_OFFICE
    CUSTOMER
    PSYCHOLOGIST
}

enum BrazilState {
    AC
    AL
    AP
    AM
    BA
    CE
    DF
    ES
    GO
    MA
    MT
    MS
    MG
    PA
    PB
    PR
    PE
    PI
    RJ
    RN
    RS
    RO
    RR
    SC
    SP
    SE
    TO
}

enum Status {
    APPROVED
    UNDER_REVIEW
    REPPROVED
}

enum AppointmentStatus {
    ONGOING
    CANCELED
    COMPLETED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum TypeNotification {
    WELCOME
    CUSTOMER_ADD_PSICO
    CREATE_APPOINTMENT
    UPDATE_APPOINTMENT
    CREATE_REVIEW
}

model Credential {
    id String @id @default(uuid()) @db.Uuid

    provider      Provider @default(EMAIL)
    email         String   @unique
    password      String   @map("password")
    tokenRecovery String?  @map("token_recovery")
    role          Role
    inactive      Boolean  @default(false)
    createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    customer     Customer?
    psychologist Psychologist?
    admin        Admin?

    @@map("credentials")
}

model Customer {
    id String @id @default(uuid()) @db.Uuid

    credentialId String? @unique @map("credential_id") @db.Uuid
    profileId    String? @unique @map("profile_id") @db.Uuid
    guestId      String? @unique @map("guest_id") @db.Uuid

    selectedPsychologistId String?  @map("selected_psychologist_id") @db.Uuid
    createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt              DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    credential Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile?    @relation(fields: [profileId], references: [id])
    guest      Guest?      @relation(fields: [guestId], references: [id])

    psychologists Psychologist[]
    reviews       Review[]
    likes         Like[]
    appointments  Appointment[]
    logs          Log[]
    views         View[]

    @@map("customers")
}

model Guest {
    id String @id @default(uuid()) @db.Uuid

    contactId String? @db.Uuid

    name String

    contact  Contact?  @relation(fields: [contactId], references: [id])
    customer Customer?

    @@map("guests")
}

model Psychologist {
    id String @id @default(uuid()) @db.Uuid

    credentialId String @unique @map("credential_id") @db.Uuid
    profileId    String @unique @map("profile_id") @db.Uuid
    officeId     String @unique @map("office_id") @db.Uuid

    resume    String?
    status    Status   @default(UNDER_REVIEW)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    credential Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile    @relation(fields: [profileId], references: [id])
    office     Office     @relation(fields: [officeId], references: [id])

    customers    Customer[]
    approaches   TherapeuticApproache[]
    reviews      Review[]
    appointments Appointment[]
    schedule     Schedule[]
    logs         Log[]
    views        View[]

    @@map("psychologists")
}

model Admin {
    id String @id @default(uuid()) @db.Uuid

    credentialId String @unique @map("credential_id") @db.Uuid
    profileId    String @unique @map("profile_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    credential Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    profile    Profile    @relation(fields: [profileId], references: [id])

    @@map("admins")
}

model Profile {
    id String @id @default(uuid()) @db.Uuid

    firstName String  @map("first_name")
    lastName  String  @map("last_name")
    cpf       String  @unique
    avatarUrl String? @map("avatar_url")
    gender    String?
    contactId String? @unique @map("contact_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    contact Contact? @relation(fields: [contactId], references: [id])

    customer     Customer?
    psychologist Psychologist?
    admin        Admin?

    @@map("profiles")
}

model Contact {
    id String @id @default(uuid()) @db.Uuid

    telephone String?
    cellPhone String?  @map("cell_phone")
    email     String?
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    profile Profile?
    office  Office?
    guest   Guest[]

    @@map("contacts")
}

model Address {
    id String @id @default(uuid()) @db.Uuid

    zipCode      String      @map("zip_code")
    street       String
    number       String?
    complement   String?
    neighborhood String
    city         String
    state        BrazilState
    latitude     Float?
    longitude    Float?
    createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

    office Office?

    @@map("addresses")
}

model TherapeuticApproache {
    id String @id @default(uuid()) @db.Uuid

    name        String   @unique
    description String?
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    psychologists Psychologist[]

    @@map("therapeutic_approaches")
}

model Office {
    id String @id @default(uuid()) @db.Uuid

    contactId String? @unique @map("contact_id") @db.Uuid
    addressId String  @unique @map("address_id") @db.Uuid

    photos    String[]
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    contact      Contact?      @relation(fields: [contactId], references: [id])
    address      Address       @relation(fields: [addressId], references: [id])
    psychologist Psychologist?

    @@map("offices")
}

model Review {
    id String @id @default(uuid()) @db.Uuid

    customerId     String @map("customer_id") @db.Uuid
    psychologistId String @map("psychologist_id") @db.Uuid

    rating    Int
    comment   String?
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
    deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

    psychologist Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade)
    customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
    likes        Like[]

    @@map("reviews")
}

model Like {
    reviewId   String   @map("review_id") @db.Uuid
    customerId String   @map("customer_id") @db.Uuid
    likedAt    DateTime @default(now()) @map("liked_at") @db.Timestamptz()

    review   Review   @relation(fields: [reviewId], references: [id])
    customer Customer @relation(fields: [customerId], references: [id])

    @@id([reviewId, customerId])
    @@map("likes")
}

model Appointment {
    id String @id @default(uuid()) @db.Uuid

    psychologistId String @map("psychologist_id") @db.Uuid
    customerId     String @map("customer_id") @db.Uuid

    createdBy          Role              @map("created_by")
    status             AppointmentStatus @default(ONGOING)
    cancellationReason String?           @map("cancellation-reason")
    price              Float?
    startsAt           DateTime          @map("starts_at") @db.Timestamptz()
    endsAt             DateTime          @map("ends_at") @db.Timestamptz()
    createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz()

    psychologist Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade)
    customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

    @@map("appointments")
}

model Schedule {
    id String @id @default(uuid()) @db.Uuid

    psychologistId String @map("psychologist_id") @db.Uuid

    from      DateTime @db.Timestamptz()
    to        DateTime @db.Timestamptz()
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    psychologist Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade)

    @@map("schedules")
}

model Log {
    id             String   @id @default(uuid()) @db.Uuid
    method         String
    route          String
    psychologistId String?  @map("psychologist_id") @db.Uuid
    customerId     String?  @map("customer_id") @db.Uuid
    data           Json     @db.Json
    createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()

    psychologist Psychologist? @relation(fields: [psychologistId], references: [id])
    customer     Customer?     @relation(fields: [customerId], references: [id])

    @@map("logs")
}

model Notification {
    id String @id @default(uuid()) @db.Uuid

    type TypeNotification
    data Json             @db.Json

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    views View[]

    @@map("notifications")
}

model View {
    id String @id @default(uuid()) @db.Uuid

    isRead Boolean @default(false)

    notificationId String  @map("notification_id") @db.Uuid
    customerId     String? @map("customer_id") @db.Uuid
    psychologistId String? @map("psychologist_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    notification Notification  @relation(fields: [notificationId], references: [id])
    customer     Customer?     @relation(fields: [customerId], references: [id])
    psychologist Psychologist? @relation(fields: [psychologistId], references: [id])

    @@map("views")
}
